@model Reimbursement_Web_System.Models.Ticket

@{
    ViewBag.Title = ViewBag.PageTitle;
}

<h2>@ViewBag.PageTitle</h2>
<div hidden>
    <iframe name="dummyframe" id="dummyframe"></iframe>
    @if (ViewBag.PageTitle != "Create Ticket")
    {

        using (Html.BeginForm("UpdateTicket", "User", FormMethod.Post, new { target = "dummyframe", id = "uploadform", encType = "multipart/form-data" }))
        {
            <input accept="image/jpeg, image/jpg, image/png" id="ImagesUpload" multiple="multiple" name="ImagesUpload" runat="server" type="file" value="">
            <dl class="dl-horizontal">
                @Html.HiddenFor(model => model.CRF)

                <dt>
                    @Html.LabelFor(model => model.User.LastName)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.User.LastName)
                    @Html.HiddenFor(model => model.User.LastName)
                </dd>
                <dt>
                    @Html.LabelFor(model => model.User.FirstName)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.User.FirstName)
                    @Html.HiddenFor(model => model.User.FirstName)
                </dd>
                <dt>
                    @Html.LabelFor(model => model.DateFiled)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.DateFiled)
                    @Html.HiddenFor(model => model.DateFiled)
                </dd>
                <dt>
                    @Html.LabelFor(model => model.Purpose)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Purpose)
                    @Html.HiddenFor(model => model.Purpose)
                </dd>

                <dt>
                    @Html.LabelFor(model => model.Office)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Office)
                    @Html.HiddenFor(model => model.Office)
                </dd>

            </dl>

            <input id="filesnames" name="filesnames" value="">
            <button type="submit" name="command" value="SaveImage" class="btn btn-success" id="imageuploadbtn" class="btn" style="border: solid #5cb85c;width: 21%;">Yes</button>}

    }
</div>



@using (Html.BeginForm("SaveTicket", "User", FormMethod.Post, new { encType = "multipart/form-data" }))
{
    @Html.HiddenFor(model => model.CRF)
<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @if (ViewBag.PageTitle == "View Ticket")
    {
        <div class="form-group">
            @Html.Label("Status", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <!-- Multi step form -->
                <section class="multi_step_form">
                    <div class="msform">
                        <!-- progressbar -->
                        <ul class="progressbar">
                            @{ if (Model.DirectorStatus == null)//Approved => Rejected => active
                                {
                                    <li class="active">Director</li>
                                }
                                else
                                {
                                    <li class="@Model.DirectorStatus">Director</li>
                                } }
                            <li class="@Model.HSUStatus">HSU</li>
                            <li class="@Model.HRStatus">HR</li>
                            <li class="@Model.SDASStatus">SDAS</li>
                            <li class="@Model.FinanceStatus">Finance</li>
                        </ul>
                    </div>
                </section>
            </div>
        </div>}

    <div class="form-group">
        @Html.LabelFor(model => model.DateFiled, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-top: 0px;" })
        <div class="col-md-10">
            @Html.DisplayFor(model => model.DateFiled, new { htmlAttributes = new { @class = "form-control DateFiled" } })
            @Html.HiddenFor(model => model.DateFiled)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Purpose, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Purpose, new { htmlAttributes = new { @class = "form-control Purpose" } })
            @Html.ValidationMessageFor(model => model.Purpose, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Office, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Office, new { htmlAttributes = new { @class = "form-control Office" } })
            @Html.ValidationMessageFor(model => model.Office, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        <div style="display: flex; justify-content: space-between">
            <div>
                <h4>Reimbursement</h4>
            </div>
            <div>
                <button type="button" class="btn btn-info reimbursement-modal" data-toggle="modal" data-target="#reimbursementModal">
                    Add Reimbursement
                </button>
            </div>
        </div>
        <table class="table table-striped table-condensed">
            <thead>
                <tr>
                    <th>Row #</th>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Nature of Expenditure</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @{decimal amount = 0; }
                @if (ViewBag.reimbursements != null)
                {
                    int i = 1;

                    foreach (var item in ViewBag.reimbursements)
                    {
                        <tr>
                            <td>@i</td>
                            <td>@item.Date.ToString("MM/dd/yyyy")</td>
                            <td>@item.Amount.ToString("0.00")</td>
                            <td>@item.NatureOfExpenditure</td>
                            <td>
                                <span>
                                    <button type="button" class="btn btn-info reimbursement-modal-update" data-toggle="modal" data-assigned-id="@i" data-target="#reimbursementModal">
                                        View
                                    </button>
                                    @Html.ActionLink("Delete", "DeleteReimbursement", "User", new { id = i }, new { @class = "btn btn-danger" })
                                </span>
                            </td>
                        </tr>
                        i++;
                        amount = @item.Amount + amount;
                    }

                }
            </tbody>
        </table>
    </div>
    <div style="margin-left:-20px">
        @{
            <h4>Total Amount: @amount.ToString("0.00")</h4> }
        <br />
        <br />
    </div>

    @if (ViewBag.PageTitle == "Create Ticket")
    {


<div style="margin-left: -15px">
    <br />
    <br />
    <input accept="image/jpeg, image/jpg, image/png" id="ImagesUpload" multiple="multiple" name="ImagesUpload" runat="server" type="file" value="">
    <br />
    <br />
</div>
                }
                else
                {
<div style="display:table;">
    <div style="width: 104%;margin-left: -20px;">
        <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300i,400,400i,500,700,900">
        <link rel="stylesheet" href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css">
        @if (Model.Medias != null)
        {
            for (int i = 0; i < Model.Medias.Count(); i++)
            {

                <div class="image-container" style="margin: 5px; float: left; position: relative">
                    <div hidden>
                        @Html.EditorFor(model => Model.Medias[i].Id, new { @class = "media-id" })
                        @Html.EditorFor(model => Model.Medias[i].ImagePath)
                        @Html.EditorFor(model => Model.Medias[i].TicketCRF)
                    </div>
               

                    <button type="button" class="delete-image close" aria-label="Delete" style="top: 0; right: 0; position: absolute; ">
                        <span aria-hidden="true">&times;</span>
                    </button>

                    <b class="images">
                        <div style="display: flex;">
                            <a href="@Model.Medias[i].ImagePath" style="background: #dadcdb;display: -webkit-box;width: 52px;cursor: pointer;">
                                <div class="ion-paperclip" style="height: 30px;width: 30px;font-size: 32px;transform: rotate(90deg);margin: 25px -10px 0px 18px;"> </div>
                            </a>
                            <div style="display: flex;background: #e7e7e7;">
                                <div style="padding: 9px 0px 0px 0px; width: 152px;">
                                    @{ string filename = ""; if (Path.GetFileName(Model.Medias[i].ImagePath).Length > 20) { filename = Path.GetFileName(Model.Medias[i].ImagePath).Substring(0, 20); } else { filename = Path.GetFileName(Model.Medias[i].ImagePath); };

                                        string uploadDir = "Ticket_Images"; //server folder name
                                        string filepath = Path.Combine(Server.MapPath("~/" + uploadDir), Path.GetFileName(Model.Medias[i].ImagePath)); FileInfo fi = new FileInfo(filepath);
                                        long fileSizeInBytes = 0;
                                        try
                                        {
                                            fileSizeInBytes = (fi.Length / 1024);
                                        }
                                        catch (Exception e) { }; }
                                    <k style="align-content: end;color: black;">@filename</k>
                                    <br>
                                    <k style="margin: -19px -2px 5px 5px;color: black;font-weight: normal;">@fileSizeInBytes kb</k>
                                </div>
                                <div style="padding: 20px 7px 13px 0px; width: 21px;">
                                    <a onclick="myFunction(this.id)" id="@i" class="popup" style="cursor: pointer;">

                                        <span class="popuptext" id="myPopup">
                                            <span>@filename </span>
                                            <br>
                                            <span>    @fileSizeInBytes kb</span>
                                            <br />
                                            <span> @fi.CreationTime</span>
                                        </span>


                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-three-dots-vertical" viewBox="0 0 16 16">
                                            <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"></path>
                                        </svg>
                                    </a>
                                </div>

                            </div>
                        </div>
                    </b>



                </div>}

        }
        <div id="beforetheadd" style="float: left;width: 70px;height: 59px;margin: 5px;">
            <input type="button" value="+" style="width: 100%; height: 100%; display: block; border: none; border-radius: 9px; font-size: 30px; " onclick="uploadfile();" />

        </div>
    </div>


</div>
                }

       
        


        <div class="form-group">
            @if (ViewBag.PageTitle == "Create Ticket")
            {
                <button type="submit" class="btn btn-success" id="btnLogin" name="command" value="Create">Create</button> }
            else
            {
                <button type="submit" class="btn btn-success" id="btnLogin" name="command" value="Update">Update</button>}
        </div>
        @if (ViewBag.PageTitle != "Create Ticket")
        {

            <div>
                <hr />

                <div>
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.DirectorRemarks, htmlAttributes: new { @class = "col-md-2" })
                                <div class="col-md-10">
                                    @Html.DisplayFor(model => model.DirectorRemarks, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.HSURemarks, htmlAttributes: new { @class = "col-md-2" })
                                <div class="col-md-10">
                                    @Html.DisplayFor(model => model.HSURemarks, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.HRRemarks, htmlAttributes: new { @class = "col-md-2" })
                                <div class="col-md-10">
                                    @Html.DisplayFor(model => model.HRRemarks, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.SDASRemarks, htmlAttributes: new { @class = "col-md-2" })
                                <div class="col-md-10">
                                    @Html.DisplayFor(model => model.SDASRemarks, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.FinanceRemarks, htmlAttributes: new { @class = "col-md-2" })
                                <div class="col-md-10">
                                    @Html.DisplayFor(model => model.FinanceRemarks, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>}
<!-- Modal -->
<div id="reimbursementModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <div id="partial"></div>
            </div>
        </div>
    </div>
</div>

<div id="partial"></div>

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/bootstrap")
<script>


    function myFunction(id) {
        var popup = document.getElementsByClassName("popuptext")[id];
        popup.classList.toggle("show");
        console.log("clicked");
    }
</script>
<script type="text/javascript">
    var uploadedint = 0;
    var allimage = @Model.Medias.Count()
        $(function () {
            $('.reimbursement-modal').click(function () {
                var purpose = $('.Purpose').val();
                var office = $('.Office').val();
                var route = '@Url.Action("ViewReimbursement", "User")?purpose=' + encodeURI(purpose) + '&office=' + encodeURI(office);
                $('#partial').load(route);
            });
            $('.reimbursement-modal-update').click(function () {
                var id = $(this).data('assigned-id');
                var purpose = $('.Purpose').val();
                var office = $('.Office').val();
                console.log('test');
                var route = '@Url.Action("ViewReimbursement", "User")?id=' + id + '&purpose=' + encodeURI(purpose) + '&office=' + encodeURI(office);
                $('#partial').load(route);
            });

            $('.delete-image').click(function (event) {
                event.currentTarget.parentElement.style="display:none;";
                event.currentTarget.parentElement.firstElementChild.children[1].setAttribute("value" , "");
            });
        });
    var imageupload = document.getElementById("ImagesUpload");

    function uploadfile() {
        imageupload.click();
    };
    function formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0 Bytes';

        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

        const i = Math.floor(Math.log(bytes) / Math.log(k));

        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }

    imageupload.onchange = ({ target }) => {

        let allfiles = target.files;
        var sendingnames = []
        for (let i = 0; i < allfiles.length; i++) {
            var currentdate = new Date();
            let fileName = allfiles[i].name
            var newfile = fileName.substring(0, fileName.indexOf('.')) + "_" + currentdate.getMilliseconds() + "-" + currentdate.getSeconds() + "-" + currentdate.getMinutes() + "-" + currentdate.getHours() + "-" + currentdate.getDate() + "." + fileName.substring(fileName.indexOf('.') + 1)
            sendingnames.push(newfile)
        }
        document.getElementsByName("filesnames")[0].setAttribute("value" , sendingnames.join("#"))


        for (let i = 0; i < allfiles.length; i++) {
            var currentdate = new Date();
            let file = allfiles[i];
            const reader = new FileReader();
            reader.onload = function () {
                const result = reader.result;
                const addbtndiv = document.getElementById("beforetheadd")
                const filename = file.name;
                var imageid = (allimage - 1);
                var hiddenelement = '<div hidden><input name="Medias[' + imageid + '].ImagePath" type="text" value="/Ticket_Images/' + sendingnames[i]+'"></div>'
                addbtndiv.insertAdjacentHTML('beforebegin',
                    '<div class="image-container" style="margin: 5px; float: left; position: relative">' + hiddenelement+'<b class="images"> <div style="display: flex;"><a style="background: #dadcdb;display: -webkit-box;width: 52px;cursor: pointer;"><div class="ion-paperclip" style="height: 30px;width: 30px;font-size: 32px;transform: rotate(90deg);margin: 25px -10px 0px 18px;"> </div></a><div style="display: flex;background: #e7e7e7;"><div style="padding: 9px 0px 0px 0px; width: 152px; overflow: hidden;"><k style="align-content: end;color: black;">' +
                    filename+'</k><br><k style="margin: -19px -2px 5px 5px;color: black;font-weight: normal;">'
                    + formatBytes(file.size, 0) + '</k></div><div style="padding: 20px 7px 13px 0px; width: 21px;"><a onclick="myFunction(this.id)" id="' +
                    $('[class="popup"]').length + '" class="popup" style="cursor: pointer;"><span class="popuptext" id="myPopup"><span>' +
                    file.name + '</span><br><span>' +
                    formatBytes(file.size, 0) + '</span><br><span>' +
                    currentdate.getDate() + "/"
                    + (currentdate.getMonth() + 1) + "/"
                    + currentdate.getFullYear() + "  "
                    + currentdate.getHours() + ":"
                    + currentdate.getMinutes() + ":"
                    + currentdate.getSeconds() + '</span></span><svg width="16" height="16" fill="currentColor" class="bi bi-three-dots-vertical" viewBox="0 0 16 16"><path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"></path></svg></a></div></div></div></b></div>');
            }
            reader.readAsDataURL(file);
            allimage++;
        }
        var pagetitle = "@ViewBag.PageTitle";
        if (pagetitle != "Create Ticket") {
            document.getElementById("imageuploadbtn").click();
        } else { uploadedint++ };
    }

</script>

<style>
    .pill {
        border: none;
        color: white;
        padding: 10px 10px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        margin: 4px 2px;
        border-radius: 16px;
    }

    .td-pending {
        background-color: #6c757d;
    }

    .td-DirectorApproved, .td-HSUApproved, .td-HRApproved, .td-SDASApproved, .td-FinanceApproved {
        background-color: #28a745;
    }

    .td-DirectorRejected, .td-HSURejected, .td-HRRejected, .td-SDASRejected, .td-FinanceRejected {
        background-color: #dc3545;
    }

    /* Popup container - can be anything you want */
    .popup {
        position: relative;
        display: inline-block;
        cursor: pointer;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }

        /* The actual popup */
        .popup .popuptext {
            visibility: hidden;
            width: 160px;
            background-color: #555;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 8px 0;
            position: absolute;
            z-index: 1;
            bottom: 117%;
            left: -73px;
        }

            /* Popup arrow */
            .popup .popuptext::after {
                content: "";
                position: absolute;
                top: 100%;
                left: 50%;
                margin-left: -5px;
                border-width: 5px;
                border-style: solid;
                border-color: #555 transparent transparent transparent;
            }

        /* Toggle this class - hide and show the popup */
        .popup .show {
            visibility: visible;
            -webkit-animation: fadeIn 1s;
            animation: fadeIn 1s;
        }

        .popup .hide {
            visibility: hidden;
            -webkit-animation: fadeIn 1s;
            animation: fadeIn 1s;
        }


    /*progressbar*/

    .msform {
        text-align: center;
        position: relative;
        margin: 0 auto;
        background: #ffffff;
        z-index: 1;
    }

    .progressbar {
        margin-bottom: 30px;
        overflow: hidden;
    }

        .progressbar li {
            list-style-type: none;
            color: Black;
            font-size: 15px;
            width: calc(100%/5);
            float: left;
            position: relative;
            text-align: center;
        }


            .progressbar li::before {
                content: "";
                font: normal normal normal 40px Ionicons;
                width: 50px;
                height: 50px;
                line-height: 50px;
                display: block;
                background: #eaf0f4;
                border-radius: 50%;
                margin: 0 auto 10px auto;
                border: 1px solid;
                font-size: 30px;
                text-align: center;
            }

            .progressbar li::after {
                content: '';
                width: 100%;
                height: 10px;
                background: #eaf0f4;
                position: absolute;
                left: -50%;
                top: 21px;
                font-size: 30px;
                z-index: -1;
                text-align: center;
            }

            .progressbar li.Approved {
                color: green;
                font-size: 14px;
                content: "\f383";
                text-align: center;
            }

                .progressbar li.Approved::after {
                    background: blue;
                    color: white;
                    font-size: 30px;
                    text-align: center;
                }

                .progressbar li.Approved::before {
                    background: #5cb85c;
                    color: white;
                    border: solid 1px blue;
                    font-size: 30px;
                    content: "\f383";
                    text-align: center;
                }


            .progressbar li.Rejected {
                color: Red;
                font-size: 14px;
                text-align: center;
            }

                .progressbar li.Rejected::after {
                    background: blue;
                    color: white;
                    font-size: 30px;
                    text-align: center;
                }

                .progressbar li.Rejected::before {
                    background: Red;
                    color: white;
                    border: solid 1px blue;
                    font-size: 30px;
                    content: "\f2d7";
                    text-align: center;
                }


            .progressbar li.active {
                color: blue;
                font-size: 25px;
                font-weight: 15px;
                text-align: center;
            }

                .progressbar li.active::after {
                    background: blue;
                    color: white;
                    font-size: 30px;
                    text-align: center;
                }
</style>
